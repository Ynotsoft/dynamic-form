name: Publish ynotsoft-dynamic-form

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g. v1.0.19 or v1.0.19-rc.1)"
        required: true
      dist_tag:
        description: "npm dist-tag (latest/next/beta/alpha). Leave blank for auto."
        required: false
        default: ""

permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------
  # 1. Prepare & Build: Checkout, Setup, Install, Build, and Upload Artifacts
  # ----------------------------------------------------------------------
  prepare_and_build:
    name: Prepare, Install & Build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
          cache: npm

      - name: Install (recreate lock on runner)
        run: |
          rm -f package-lock.json
          npx -y npm@10 install --no-audit --no-fund

      - name: Build (tsup)
        # This step runs successfully because 'npm install' was in the same job.
        run: npm run build

      - name: Verify dist files
        run: |
          test -f dist/index.js
          test -f dist/index.cjs

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: |
            dist/
            package.json
            package-lock.json
            # Add any other files required for npm publish (e.g., README, license)

  # ----------------------------------------------------------------------
  # 2. Derive Variables: Perform checks, version bumping, and decide on tag/action
  # ----------------------------------------------------------------------
  derive_variables:
    name: Derive Publish Variables & Prep Package
    needs: prepare_and_build
    runs-on: ubuntu-latest

    # Define outputs that subsequent jobs will need
    outputs:
      pkg_name: ${{ steps.pkg.outputs.name }}
      pkg_version: ${{ steps.ver.outputs.version }}
      npm_tag: ${{ steps.tag.outputs.tag }}
      already_exists: ${{ steps.exists.outputs.exists }}

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-artifacts
          path: .

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/" # Required for existence check

      - name: Derive Package Name & Validate
        id: pkg
        run: |
          NAME=$(node -p "require('./package.json').name")
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          if [ "$NAME" != "ynotsoft-dynamic-form" ]; then
            echo "::error::package.json 'name' must be 'ynotsoft-dynamic-form'"; exit 1;
          fi

      - name: Derive Version
        id: ver
        run: |
          # Use github.event.inputs.version for workflow_dispatch, GITHUB_REF_NAME for release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW="${{ github.event.inputs.version }}"
          else
            RAW="${GITHUB_REF_NAME}"
          fi
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Ensure repository matches provenance & Set version
        run: |
          # Ensure repository field matches GitHub for npm --provenance
          export REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          node -e "const fs=require('fs');const p='./package.json';const pkg=JSON.parse(fs.readFileSync(p,'utf8'));pkg.repository={type:'git',url:process.env.REPO_URL};fs.writeFileSync(p, JSON.stringify(pkg,null,2));"

          # Idempotent version stamp
          TARGET="${{ steps.ver.outputs.version }}"
          CURRENT=$(node -p "require('./package.json').version")
          if [ "$CURRENT" != "$TARGET" ]; then
            echo "Bumping version from $CURRENT to $TARGET."
            npx -y npm@10 version "$TARGET" --no-git-tag-version
          else
            echo "Version already $TARGET â€” skipping bump."
          fi

      - name: Choose npm dist-tag
        id: tag
        run: |
          INPUT="${{ github.event.inputs.dist_tag }}"
          if [ -n "$INPUT" ]; then
            echo "tag=$INPUT" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          VER="${{ steps.ver.outputs.version }}"
          if [[ "$VER" == *-* ]]; then
            echo "tag=next" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if version already exists on npm
        id: exists
        run: |
          PKG="${{ steps.pkg.outputs.name }}"
          VER="${{ steps.ver.outputs.version }}"
          if npx -y npm@10 view "$PKG@$VER" version >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Final Package.json Artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-package-json
          path: package.json # Upload the version-stamped, provenance-updated package.json

  # ----------------------------------------------------------------------
  # 3. Publish: Publish the package to npm (ONLY if it's a new version)
  # ----------------------------------------------------------------------
  publish:
    name: Publish to npm
    needs: derive_variables
    runs-on: ubuntu-latest
    if: needs.derive_variables.outputs.already_exists == 'false'

    # Permissions MUST be set on the job that publishes
    permissions:
      contents: read # Needed to download artifacts
      id-token: write # Needed for npm provenance
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Download Artifacts for Publish
        uses: actions/download-artifact@v4
        with:
          name: package-artifacts
          path: .

      - name: Download Final Package.json
        uses: actions/download-artifact@v4
        with:
          name: final-package-json
          path: .

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"

      - name: Publish Package
        run: npm publish --access public --provenance --tag "${{ needs.derive_variables.outputs.npm_tag }}"

  # ----------------------------------------------------------------------
  # 4. Retag: Update the dist-tag (ONLY if the version already exists)
  # ----------------------------------------------------------------------
  retag:
    name: Promote dist-tag
    needs: derive_variables
    runs-on: ubuntu-latest
    if: needs.derive_variables.outputs.already_exists == 'true'

    permissions:
      contents: read # Only need read for npm view/dist-tag
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # Needed for dist-tag command

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"

      - name: Promote dist-tag
        run: |
          PKG="${{ needs.derive_variables.outputs.pkg_name }}"
          VER="${{ needs.derive_variables.outputs.pkg_version }}"
          TAG="${{ needs.derive_variables.outputs.npm_tag }}"
          echo "Promoting $PKG@$VER to dist-tag '$TAG'"
          npx -y npm@10 dist-tag add "$PKG@$VER" "$TAG"
