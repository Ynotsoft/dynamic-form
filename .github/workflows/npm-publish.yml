name: Publish ynotsoft-dynamic-form

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g. v1.0.18 or v1.0.18-rc.1)"
        required: true
      dist_tag:
        description: "npm dist-tag (latest/next/beta/alpha). Leave blank for auto."
        required: false
        default: ""

permissions:
  contents: read

jobs:
  publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    # run for manual OR release
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      id-token: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          # if caching causes trouble, comment this out once to bust it
          cache: npm

      # Show what we're actually running
      - name: Show tool versions & lockfileVersion
        run: |
          echo "node (PATH): $(node -v)"
          echo "npm  (PATH): $(npm -v)"
          echo "npm  (npx):  $(npx -y npm@10 -v)"
          node -p "require('./package-lock.json').lockfileVersion"

      # âœ… Use npm@10 explicitly, so lockfile v3 is honoured
      - name: Install (strict with npm@10)
        run: npx -y npm@10 ci

      - name: Build (tsup)
        run: npm run build

      - name: Package name must match
        run: |
          NAME=$(node -p "require('./package.json').name")
          echo "package.json name: $NAME"
          if [ "$NAME" != "ynotsoft-dynamic-form" ]; then
            echo "::error::package.json 'name' must be 'ynotsoft-dynamic-form'"; exit 1;
          fi

      # Derive version from tag (release) or manual input
      - name: Derive version
        id: ver
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW="${{ github.event.inputs.version }}"
          else
            RAW="${GITHUB_REF_NAME}"
          fi
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Publishing version $VERSION"

      # Stamp package.json using npm@10 as well
      - name: Set version in package.json
        run: npx -y npm@10 version "${{ steps.ver.outputs.version }}" --no-git-tag-version

      - name: Verify dist files
        run: |
          test -f dist/index.js
          test -f dist/index.cjs

      # Auto dist-tag: pre-releases -> next; stable -> latest; or honour manual override
      - name: Choose npm dist-tag
        id: tag
        run: |
          INPUT="${{ github.event.inputs.dist_tag }}"
          if [ -n "$INPUT" ]; then
            echo "tag=$INPUT" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          VER="${{ steps.ver.outputs.version }}"
          if [[ "$VER" == *-* ]]; then
            echo "tag=next" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish
        run: npm publish --access public --provenance --tag "${{ steps.tag.outputs.tag }}"
