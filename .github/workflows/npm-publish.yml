name: Publish ynotsoft-dynamic-form

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g. v1.0.18 or v1.0.18-rc.1)"
        required: true
      dist_tag:
        description: "npm dist-tag (latest/next/beta/alpha). Leave blank for auto."
        required: false
        default: ""

permissions:
  contents: read

jobs:
  publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      id-token: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Show tool versions & lockfileVersion
        run: |
          echo "node (PATH): $(node -v)"
          echo "npm  (PATH): $(npm -v)"
          echo "npm  (npx):  $(npx -y npm@10 -v)"
          node -p "require('./package-lock.json').lockfileVersion"

      - name: Install (recreate lock on runner)
        run: |
          rm -f package-lock.json
          npx -y npm@10 install --no-audit --no-fund

      - name: Build (tsup)
        run: npm run build

      - name: Package name must match
        run: |
          NAME=$(node -p "require('./package.json').name")
          echo "package.json name: $NAME"
          if [ "$NAME" != "ynotsoft-dynamic-form" ]; then
            echo "::error::package.json 'name' must be 'ynotsoft-dynamic-form'"; exit 1;
          fi

      - name: Derive version
        id: ver
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW="${{ github.event.inputs.version }}"
          else
            RAW="${GITHUB_REF_NAME}"
          fi
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Publishing version $VERSION"

      - name: Ensure repository matches provenance
        run: |
          export REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"   # <-- export matters
          echo "Setting package.json repository to: $REPO_URL"
          node -e "const fs=require('fs');const p='./package.json';const pkg=JSON.parse(fs.readFileSync(p,'utf8'));pkg.repository={type:'git',url:process.env.REPO_URL};fs.writeFileSync(p, JSON.stringify(pkg,null,2));"
          # sanity check
          node -p "require('./package.json').repository.url"

      - name: Set version in package.json (idempotent)
        run: |
          TARGET="${{ steps.ver.outputs.version }}"
          CURRENT=$(node -p "require('./package.json').version")
          echo "current=$CURRENT target=$TARGET"
          if [ "$CURRENT" = "$TARGET" ]; then
            echo "Version already $TARGET â€” skipping bump."
            exit 0
          fi
          npx -y npm@10 version "$TARGET" --no-git-tag-version

      - name: Verify dist files
        run: |
          test -f dist/index.js
          test -f dist/index.cjs

      - name: Choose npm dist-tag
        id: tag
        run: |
          INPUT="${{ github.event.inputs.dist_tag }}"
          if [ -n "$INPUT" ]; then
            echo "tag=$INPUT" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          VER="${{ steps.ver.outputs.version }}"
          if [[ "$VER" == *-* ]]; then
            echo "tag=next" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish
        run: npm publish --access public --provenance --tag "${{ steps.tag.outputs.tag }}"
